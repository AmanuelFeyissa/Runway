/********************** Tag Selector *********************/
body {
  /* For Centering any element that doesnt have its width altered */
  text-align: center;
  /* Using the font family we have chosen and the fallback */
  font-family: 'Nunito', sans-serif;
}

h1 {
  color: #BCCC9A;
}

h2 {
  width: 10px;
  /* For Centering any element that does have its width altered */
  margin: 0 auto 0 auto;
  color: grey;
}

/* the heading tag has a default margin to override that we use the below */
h6 {
  margin-top: 0;
}

/* to edit our div section */
div {
  background-color: #E4F9F5;
}

/********************** Class Selector *********************/
/* class is used to specfiy and manipulate specific kind of tag outof the same
   used in the html document
   or to manipulate different kind of tags with a same css properies but same
   class name */
.burger {
  background-color: red;
}

.p1 {
  background-color: white;
}

/********************** id Selector *********************/
#hello-id {
  color: gold;
}

/********************** Box Model *********************/
/* To Affect the element's Width and height */
h4 {
  width: 20px;
  height: 10px;
}

/* Padding is giving space between the text and the edge of the element */
h4 {
  /* Affects All on four sides */
  padding: 20px;
  /* Affects the four sides with a specific unit in CLOCKWISE
       top right bottom left */
  padding: 10px 10px 20px 10px;
  /* Affects each sides with their corresponding name */
  padding-top: 10px;
  padding-right: 20px;
  padding-bottom: 30px;
  padding-left: 40px;
}

/* Border is what beautifies and affects what is outside of the element */
h4 {
  /* Affects All on four sides */
  border: 20px;
  /* Affects the four sides with a specific unit in CLOCKWISE
     top right bottom left */
  border: 10px 10px 20px 10px;
  /* Affects each sides with their corresponding name */
  border-top: 10px;
  border-right: 20px;
  border-bottom: 30px;
  border-left: 40px;
}

/* Margin is the one that affects the space between the two elements that are
   present in adocument */
h4 {
  /* Affects All on four sides */
  margin: 20px;
  /* Affects the four sides with a specific unit in CLOCKWISE
        top right bottom left */
  margin: 10px 10px 20px 10px;
  /* Affects each sides with their corresponding name */
  margin-top: 10px;
  margin-right: 20px;
  margin-bottom: 30px;
  margin-left: 40px;
}

/*********************** Display property *********************/
/* Display Block is elements that take up full width */
h2 {
  /* h p div lists and form are by default block */
  display: block;
}

/* Display inline is elements that doesnt take up full width and can put
   texts side by side */
span {
  /* span anchor img are by default inline */
  display: inline;
}

/* Display inline-block is the best of both worlds */
h1 {
  /* img is a inline-block element */
  display: inline-block;
}

/* Display None gets rid of the element as if it didnt exist */
h6 {
  display: none;
  /* Other way is usiing the visibility property and setting it to hidden */
  visibility: hidden;
}

/*********************** CSS positioning *********************/
/* Static is the default position of the element set by the rules of HTML */
h3 {
  position: static;
}

/* Relative is the position relative to the default or static position */
h3 {
  position: relative;
  /* The we can set its next coordinates by using the four properies */
  left: 10px;
  right: 20px;
  top: 10px;
  bottom: 10px;
}

/* Absolute is adding the element position relative to its parent element */
h3 {
  position: absolute;
  /* The we can set its next coordinates by using the four properies */
  left: 10px;
  right: 20px;
  top: 10px;
  bottom: 10px;
}

/* Fixed position is used when we want make the element fixed to one position
   even if we are scrolling mostly used to create a nav bar */
h3 {
  position: fixed;
  /* it will stay on the top whatever happens */
  top: 0;
}

/*********************** CSS font sizing *********************/

/* We use the font-sizing property for sizing */
h3{
  font-size: 20px;
  /* When sizing we can set the value by pixels or persentile or em or rem
     px is used for always but
     persentile and em are more recommended
     rem is the best it doesnt inherit the size of the parent RECOMMENDED
     1em = 16px = 100% = 1rem
  */
  font-size: 2.5rem;

/* Line height is used to give more spacing in our h p or even body
   usually assigned with a single digit value without unit */
   line-height: 2;
  }

/*********************** CSS float and clear *********************/

/* floating is used to wrap a text, img or a next to each other */
  h3{
    float: left;

/* clear is the anti float it doesnt allow a tag to be next to it */
    clear: right;
  }

  /*********************** CSS FlexBox *********************/
  /* flexbox only works if the items we want to manipulate are the child of that
     tag like h3 */
    h3{
    /* To declare a flexbox */
      display: flex;
    /* Flex direction is by default row or left to right */
    flex-direction: row;
    /* Main axis means left to right
       cross axis means top to bottom */

    /* justify content handles spacing on the main axis or left to right
       by default it is set to flex-start */
       justify-content: flex-start;

       /* align items handles spacing on the cross axis or left to right
          by default it is set to strech */
       align-items: stretch;

       /* to position items we can use the margin tag with auto to work */
       margin-left: auto;

       /* Wrap: by default the flexbox is set to do his job in one row or
          one column[nowrap] but we can change that by using flex-wrap */
       flex-wrap: wrap;

       /* Flex Property, is a shorthand for 3 different properties that handle
          the grow, the shrink and the basis of an item depending on the device
          */
          flex: 1 1 0; /* flex-grow, flex-shrink, flex-basis */

          flex-grow: 1; /* grows the item according to the device */
          flex-shrink: 1; /* shrinks the item according to the device */
          flex-basis: 0; /* sets the base width for the item */

       /* Order: this property enables us to change the order of our items */
         order: -1; /* if it less than 0 the item comes first */
         order: 0; /* if it is 0 the item comes stays as is DEFAULT */
         order: 1; /* if it more than 0 the item comes last */
    }

      /*********************** CSS Grid *********************/
    h2{
    /* To declare a flexbox */
      display: grid;

    /* shorthand way of specifing/creating rows and columns is */
        grid-template: 100px 20px; /* FIRST ROWS THEN COLUMNS */
    /* To specify/create a column */
      grid-template-columns: 100px 20px 100px;
    /* To specify/create a rows */
      grid-template-rows: 20px 50px;
    /* To simplify the value part of making rows and columns we use the repeat
       property
       fr means fraction units USED FOR RESPONSIVE DESIGN
       repeat(3, 1fr) 3 is the amount of rows or columns, 1fr is the Value
    */
      grid-template: repeat(3, 1fr) repeat(2, 1fr); /* ROWS THEN COLUMNS */

    /* To give gaps between grids we use grid-gap */
      grid-gap: 2px;

    /* to position items on a grid we use */
    /* Means that it starts from column 1 and ends at 3
       in place of 3 we can use -1 or span
       -1 means the last column
       span 2 means span 2 columns
    */
       grid-column-start: 1;
       grid-column-end: 3;
    /* to position items on a grid we use */
    /* Means that it starts from row 1 and ends at 3
       in place of 3 we can use -1 or span
      -1 means the last rows
      span 2 means span 2 rows
           */
      grid-row-start: 1;
      grid-row-end: 3;

      /* Template areas are best for making/laying out grid quickly
         to use it we first need to define it in the parent class */
         grid-template-areas: "h h"
                              "m m"
                              "f f";
      /* h m f represents a string name to be assigned in the child class
         then we assign it by using the grid-area property in the child class
         */
         .something{
           grid-area: h; /* or m or f */
         }


    }
